from typing import List
import pytest_mock
from tictactoe_user_handler import TicTacToeUserHandler


def handler_set_of_messages(handler: TicTacToeUserHandler, messages: List[str]) -> None:
    for message in messages:
        handler.handle_message(message=message)


def test_x_wins(mocker: pytest_mock.MockFixture) -> None:
    send_message = mocker.stub(name='send_message_stub')
    handler = TicTacToeUserHandler(send_message=send_message)
    messages = ['X 1 1',
                'O 2 1',
                'start',
                'X 1 1',
                'O 1 1',
                'O 2 1',
                'X 2 2',
                'O 1 2',
                'X 0 0']
    handler_set_of_messages(handler, messages)
    assert send_message.call_args_list == [
        mocker.call('Game is not started'),
        mocker.call('Game is not started'),
        mocker.call('...\n...\n...'),
        mocker.call('...\n.X.\n...'),
        mocker.call('Invalid turn'),
        mocker.call('...\n.XO\n...'),
        mocker.call('...\n.XO\n..X'),
        mocker.call('...\n.XO\n.OX'),
        mocker.call('X..\n.XO\n.OX'),
        mocker.call('Game is finished, X wins')]


def test_o_wins(mocker: pytest_mock.MockFixture) -> None:
    send_message = mocker.stub(name='send_message_stub')
    handler = TicTacToeUserHandler(send_message=send_message)
    messages = ['ahaha',
                'start',
                'O 1 1',
                'X 0 0',
                'X 0 1',
                'O 1 1',
                'O 0 1',
                'X 0 1',
                'O 0 2',
                'O 0 2',
                'X 0 2',
                'X 1 1',
                'X 1 0',
                'O 2 0']
    handler_set_of_messages(handler, messages)
    assert send_message.call_args_list == [
        mocker.call('Game is not started'),
        mocker.call('...\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('X..\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('X..\n.O.\n...'),
        mocker.call('Invalid turn'),
        mocker.call('X..\nXO.\n...'),
        mocker.call('X..\nXO.\nO..'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('XX.\nXO.\nO..'),
        mocker.call('XXO\nXO.\nO..'),
        mocker.call('Game is finished, O wins')]


def test_draw(mocker: pytest_mock.MockFixture) -> None:
    send_message = mocker.stub(name='send_message_stub')
    handler = TicTacToeUserHandler(send_message=send_message)
    messages = ['hello',
                'go',
                'begin',
                'what are you doing?',
                'start',
                'X 1 1',
                'start',
                'O 2 1',
                'X 2 1',
                'Y 1 1',
                'O 1 1',
                'X X X',
                'O O O',
                'XXX',
                'ohoho',
                'X 2 0',
                'O 2 2',
                'opapa',
                '0 0 0',
                'O O 0',
                'X 0 0',
                'aaaaaaaaaaa',
                'O 1 0',
                'XOX',
                'x 1 2',
                'X 1 2',
                'o ))',
                'O 0 2',
                'end',
                'X 0 1']
    handler_set_of_messages(handler, messages)
    assert send_message.call_args_list == [
        mocker.call('Game is not started'),
        mocker.call('Game is not started'),
        mocker.call('Game is not started'),
        mocker.call('Game is not started'),
        mocker.call('...\n...\n...'),
        mocker.call('...\n.X.\n...'),
        mocker.call('...\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('...\n..X\n...'),
        mocker.call('Invalid turn'),
        mocker.call('...\n.OX\n...'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('..X\n.OX\n...'),
        mocker.call('..X\n.OX\n..O'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('X.X\n.OX\n..O'),
        mocker.call('Invalid turn'),
        mocker.call('XOX\n.OX\n..O'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('XOX\n.OX\n.XO'),
        mocker.call('Invalid turn'),
        mocker.call('XOX\n.OX\nOXO'),
        mocker.call('Invalid turn'),
        mocker.call('XOX\nXOX\nOXO'),
        mocker.call('Game is finished, draw')]


def test_behaviour_program(mocker: pytest_mock.MockFixture) -> None:
    send_message = mocker.stub(name='send_message_stub')
    handler = TicTacToeUserHandler(send_message=send_message)
    messages = ['what is it?',
                'start',
                'start',
                'start now',
                'game is cool',
                'start',
                'X X X',
                'go go go',
                'X 0 0',
                'Y 1 1',
                'Z 2 2',
                'oh',
                'O 0 0',
                'O 3 3',
                'A A A',
                'Invalid turn!',
                'O 0 0',
                'O 0 1',
                'O 0 2',
                'O 1 0',
                'O 1 1',
                'O 1 2',
                'O 2 0',
                'O 2 1',
                'O 2 2',
                'X 0 0',
                'X 1 0',
                'X 2 0',
                'O 2 0',
                'start',
                'ahaha',
                'start',
                'O 1 1',
                'X 0 0',
                'X 0 1',
                'O 1 1',
                'O 0 1',
                'X 0 1',
                'O 0 2',
                'O 0 2',
                'X 1 1',
                'X 1 0',
                'O 2 0',
                'start',
                'x 0 0',
                'X 0 0',
                'O 1 0',
                'X 2 0',
                'O 0 2',
                'X 1 2',
                'O 2 2',
                'X 0 1',
                'O 1 1',
                'X 2 1',
                'start',
                'finish']
    handler_set_of_messages(handler, messages)
    assert send_message.call_args_list == [
        mocker.call('Game is not started'),
        mocker.call('...\n...\n...'),
        mocker.call('...\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('...\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('X..\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('X..\nO..\n...'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('XX.\nO..\n...'),
        mocker.call('Invalid turn'),
        mocker.call('XXO\nO..\n...'),
        mocker.call('...\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('...\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('X..\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('X..\n.O.\n...'),
        mocker.call('Invalid turn'),
        mocker.call('X..\nXO.\n...'),
        mocker.call('X..\nXO.\nO..'),
        mocker.call('Invalid turn'),
        mocker.call('Invalid turn'),
        mocker.call('XX.\nXO.\nO..'),
        mocker.call('XXO\nXO.\nO..'),
        mocker.call('Game is finished, O wins'),
        mocker.call('...\n...\n...'),
        mocker.call('Invalid turn'),
        mocker.call('X..\n...\n...'),
        mocker.call('XO.\n...\n...'),
        mocker.call('XOX\n...\n...'),
        mocker.call('XOX\n...\nO..'),
        mocker.call('XOX\n...\nOX.'),
        mocker.call('XOX\n...\nOXO'),
        mocker.call('XOX\nX..\nOXO'),
        mocker.call('XOX\nXO.\nOXO'),
        mocker.call('XOX\nXOX\nOXO'),
        mocker.call('Game is finished, draw'),
        mocker.call('...\n...\n...'),
        mocker.call('Invalid turn')]
